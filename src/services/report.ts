import { AnalysisModel, CodeIssueModel, LearningResourceModel } from '../models/analysis.js';
import { IssueTypeFormatter, SeverityFormatter, DateFormatter } from '../utils/formatters.js';

export class ReportGenerator {
  generateMarkdownReport(analysis: AnalysisModel): string {
    let report = `# コードレビュー結果\n\n`;
    report += `**Repository**: ${analysis.repository}\n`;
    report += `**Pull Request**: #${analysis.pullRequestId}\n`;
    report += `**分析日時**: ${DateFormatter.toJapaneseString(analysis.createdAt)}\n\n`;
    
    report += `## 📊 サマリー\n${analysis.summary}\n\n`;
    
    if (analysis.totalIssues > 0) {
      report += this.generateIssuesSection(analysis);
    }
    
    if (analysis.suggestions.length > 0) {
      report += this.generateSuggestionsSection(analysis.suggestions);
    }
    
    return report;
  }

  generateJsonReport(analysis: AnalysisModel): object {
    return {
      id: analysis.id,
      repository: analysis.repository,
      pullRequestId: analysis.pullRequestId,
      summary: analysis.summary,
      createdAt: DateFormatter.toISOString(analysis.createdAt),
      statistics: {
        totalIssues: analysis.totalIssues,
        criticalCount: analysis.criticalIssues.length,
        highCount: analysis.highSeverityIssues.length,
        mediumCount: analysis.mediumSeverityIssues.length,
        lowCount: analysis.lowSeverityIssues.length,
        affectedFiles: analysis.affectedFiles.length
      },
      issues: analysis.issues.map(issue => this.formatIssueForJson(issue)),
      suggestions: analysis.suggestions.map(suggestion => this.formatSuggestionForJson(suggestion))
    };
  }

  generateGitHubCommentReport(analysis: AnalysisModel): string {
    let comment = `## 🤖 Code-Mole レビュー結果\n\n`;
    comment += `📊 **サマリー**: ${analysis.summary}\n\n`;

    if (analysis.hasCriticalIssues) {
      comment += `⚠️ **重要**: ${analysis.criticalIssues.length}件の重大な問題が見つかりました\n\n`;
    }

    if (analysis.totalIssues > 0) {
      comment += `### 🔍 検出された問題 (${analysis.totalIssues}件)\n\n`;
      
      // 重要度の高い問題のみ表示（コメントが長くなりすぎないよう）
      const highPriorityIssues = analysis.issues
        .filter(issue => issue.isHighPriority)
        .slice(0, 5); // 最大5件まで

      highPriorityIssues.forEach((issue, index) => {
        comment += `${index + 1}. **${issue.locationString}** `;
        comment += `(${SeverityFormatter.getDisplayName(issue.severity)})\n`;
        comment += `   ${issue.description}\n`;
        comment += `   💡 ${issue.recommendation}\n\n`;
      });

      if (analysis.issues.length > 5) {
        comment += `... 他 ${analysis.issues.length - 5} 件の問題があります\n\n`;
      }
    }

    if (analysis.suggestions.length > 0) {
      comment += `### 📚 推奨学習リソース\n\n`;
      analysis.suggestions.slice(0, 3).forEach((resource, index) => {
        comment += `${index + 1}. [${resource.title}](${resource.url})\n`;
      });
    }

    comment += `\n---\n_Generated by [Code-Mole](https://github.com/HasutoSasaki/code-mole) 🐹_`;
    
    return comment;
  }

  private generateIssuesSection(analysis: AnalysisModel): string {
    let section = `## 🔍 検出された問題\n\n`;
    
    Object.entries(analysis.issuesByType).forEach(([type, issues]) => {
      section += `### ${IssueTypeFormatter.getDisplayName(type)}\n`;
      issues.forEach((issue, index) => {
        section += `${index + 1}. **${issue.locationString}** `;
        section += `(${SeverityFormatter.getDisplayName(issue.severity)})\n`;
        section += `   - ${issue.description}\n`;
        section += `   - 💡 ${issue.recommendation}\n\n`;
      });
    });
    
    return section;
  }

  private generateSuggestionsSection(suggestions: LearningResourceModel[]): string {
    let section = `## 📚 学習リソース\n\n`;
    
    suggestions.forEach((resource, index) => {
      section += `${index + 1}. [${resource.title}](${resource.url})\n`;
      section += `   - ${resource.description}\n`;
      if (resource.tags.length > 0) {
        section += `   - Tags: ${resource.tags.join(', ')}\n`;
      }
      section += `\n`;
    });
    
    return section;
  }

  private formatIssueForJson(issue: CodeIssueModel): object {
    return {
      type: issue.type,
      severity: issue.severity,
      file: issue.file,
      ...(issue.line && { line: issue.line }),
      description: issue.description,
      recommendation: issue.recommendation,
      locationString: issue.locationString,
      isHighPriority: issue.isHighPriority
    };
  }

  private formatSuggestionForJson(suggestion: LearningResourceModel): object {
    return {
      title: suggestion.title,
      url: suggestion.url,
      source: suggestion.source,
      description: suggestion.description,
      ...(suggestion.language && { language: suggestion.language }),
      tags: suggestion.tags,
      isJapanese: suggestion.isJapanese
    };
  }
}